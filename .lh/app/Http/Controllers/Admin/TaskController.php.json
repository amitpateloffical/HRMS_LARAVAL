{
    "sourceFile": "app/Http/Controllers/Admin/TaskController.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1714451841190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1714451841190,
            "name": "Commit-0",
            "content": "<?php\r\nnamespace App\\Http\\Controllers\\Admin;\r\n\r\nuse App\\Models\\Task;\r\nuse Illuminate\\Http\\Request;\r\nuse App\\Http\\Controllers\\Controller;\r\n\r\n\r\nclass TaskController extends Controller\r\n{\r\n       /**\r\n     * Display a listing of the resource.\r\n     *\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    public function index()\r\n    {\r\n        $title = 'TaskHRMS';\r\n        $tasks = Task::latest()->get();\r\n        return view('backend.Task.index',compact(\r\n            'title','tasks'\r\n        ));\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Display a listing of the resource.\r\n     *\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    public function lists()\r\n    {\r\n        $title = 'projects';\r\n        $tasks = Task::get();\r\n        return view('backend.Task.task-list',compact(\r\n            'title','tasks'\r\n        ));\r\n    }\r\n\r\n\r\n    \r\n    /**\r\n     * Display a listing of the resource.\r\n     *\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    public function leads(){\r\n        $title = 'project leads';\r\n        $projects = Task::get();\r\n        return view('backend.projects.leads',compact(\r\n            'title','projects'\r\n        ));\r\n    }\r\n\r\n    /**\r\n     * Store a newly created resource in storage.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    public function store(Request $request)\r\n    {\r\n        $request->validate([\r\n            'task_name'=>'required',\r\n            'task_description'=>'required',\r\n            'task_deadline'=>'required',\r\n            'task_priority'=>'required',\r\n      \r\n        ]); \r\n        // $files = null;\r\n        // if($request->hasFile('image')){\r\n        //     $files = array();\r\n        //     foreach($request->image as $file){\r\n        //         $fileName = time().'.'.$file->extension();\r\n        //         $file->move(public_path('storage/tasks/'.$request->name), $fileName);\r\n        //         array_push($files,$fileName);\r\n        //     }\r\n        // }\r\n\r\n        $imageName = null;\r\n        if($request->image != null){\r\n            $imageName = time().'.'.$request->image->extension();\r\n            $request->image->move(public_path('storage/tasks'), $imageName);\r\n        }\r\n      \r\n        Task::create([\r\n            'task_name'=>$request->task_name,\r\n            'task_description'=>$request->task_description,\r\n            'task_deadline'=>$request->task_deadline,\r\n            'task_priority'=>$request->task_priority,\r\n            // 'company'=>$request->company,\r\n            // 'image' => $files,\r\n                ]);\r\n                return back()->with('success','Task has been added successfully!!!');\r\n    }\r\n    /**\r\n     * Display the specified resource.\r\n     *\r\n     * @param  string  $project_name\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    public function show()\r\n    {\r\n       $title = 'view project';\r\n        // $project = Task::where('name','=',$project_name)->firstOrFail();\r\n        // return view('backend.tasks.show',compact(\r\n        //     'title','project'\r\n        // ));\r\n\r\n        $tasks = Task::get();\r\n        //dd($tasks);\r\n        return view('backend.Task.show', ['tasks' => $tasks,'title'=>$title]);\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * Update the specified resource in storage.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * \r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    public function update(Request $request ,$id)\r\n    {\r\n        $request->validate([\r\n            'task_name' => 'required',\r\n            'task_description' => 'required',\r\n            'task_deadline' => 'required',\r\n            'task_priority' => 'required',\r\n            // 'image'=>'file|image|mimes:jpg,jpeg,gif',\r\n      \r\n        ]); \r\n        \r\n        \r\n\r\n        $imageName = null;\r\n        if($request->image != null){\r\n            $imageName = time().'.'.$request->image->extension();\r\n            $request->image->move(public_path('storage/tasks'), $imageName);\r\n        }\r\n       $task =Task::findorfail($request->id);\r\n        \r\n        $task->update([\r\n             'task_name'=>$request->task_name,\r\n             'task_description'=>$request->lastname,\r\n             'task_deadline'=>$request->email,\r\n             'task_priority'=>$request->phone,\r\n            //  'image'=>$imageName,\r\n            //  'company'=>$request->company\r\n        ]);\r\n        $notification = notify('task has been updated');\r\n        return back()->with($notification);\r\n    }\r\n\r\n    /**\r\n     * Remove the specified resource from storage.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @return \\Illuminate\\Http\\Response\r\n     */\r\n    public function destroy(Request $request)\r\n    {\r\n        Task::findOrfail($request->id)->delete();\r\n        $notification = notify('project has been added');\r\n        return back()->with($notification);\r\n    }\r\n\r\n}\r\n"
        }
    ]
}